<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Malware Analysis on Pygrum</title>
    <link>https://pygrum.github.io/tags/malware-analysis/</link>
    <description>Recent content in Malware Analysis on Pygrum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Pygrum</copyright>
    <lastBuildDate>Wed, 01 May 2024 20:54:07 +0100</lastBuildDate>
    <atom:link href="https://pygrum.github.io/tags/malware-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding the Windows Portable Executable, Part 2 - Imports &amp; Exports</title>
      <link>https://pygrum.github.io/posts/understanding-windows-pe-2-imports-exports/</link>
      <pubDate>Wed, 01 May 2024 20:54:07 +0100</pubDate>
      <guid>https://pygrum.github.io/posts/understanding-windows-pe-2-imports-exports/</guid>
      <description>Introduction This post follows part 1 of the Windows PE series, where we parsed basic information about a Windows portable executable, including whether it was 64-bit or not, the compile time, section count, and section sizes. In this article, we parse imported and exported functions in the PE.&#xA;Why? Imports and exports can prove to be very useful when determining the true nature of malware. Predictions about the malware class or behaviour can be made with reasonable accuracy, if already confirmed to be malicious.</description>
    </item>
    <item>
      <title>A Deconstruction of Koi Stealer - Malware Analysis</title>
      <link>https://pygrum.github.io/posts/koi-stealer/</link>
      <pubDate>Mon, 08 Apr 2024 15:27:05 +0100</pubDate>
      <guid>https://pygrum.github.io/posts/koi-stealer/</guid>
      <description>Overview Koi stealer samples began appearing on any.run in mid-late february. The samples identified as Koi are mostly Powershell scripts, including the one I analysed.&#xA;Note: Koi stealer should not be confused with AZORult. From what I&amp;rsquo;ve identified, they are two distinct families, and not even written in the same language. Koi is written in C# while AZORult 2019 is written in C++.&#xA;The stealer performs basic system checks before stealing various data in 3 stages - browser data, including passwords, cryptocurrency wallet and password manager data, some application data, and other files of interest.</description>
    </item>
    <item>
      <title>Understanding the Windows Portable Executable, Part 1 - PE Format</title>
      <link>https://pygrum.github.io/posts/understanding-windows-pe-1-pe-format/</link>
      <pubDate>Tue, 27 Feb 2024 18:47:18 +0000</pubDate>
      <guid>https://pygrum.github.io/posts/understanding-windows-pe-1-pe-format/</guid>
      <description>Introduction This series aims to demonstrate how create tools based on your own research. To fully grasp how to work with Windows PEs, for use in malware development and analysis, we&amp;rsquo;re only using documentation from Microsoft. This approach helps me personally when it comes to developing new research, acquiring a well-rounded understanding of a topic, and improves my creativity. Hopefully it helps you too.&#xA;By the end of this article, we will have written a tool in C that extracts basic information from a given Windows PE.</description>
    </item>
    <item>
      <title>Tackling Disassembled Structs in IDA</title>
      <link>https://pygrum.github.io/posts/tackling-disassembled-structs-in-ida/</link>
      <pubDate>Thu, 18 Jan 2024 23:29:54 +0000</pubDate>
      <guid>https://pygrum.github.io/posts/tackling-disassembled-structs-in-ida/</guid>
      <description>Reverse engineering software is a lot of work. Personally, the hardest part is figuring out which areas are worth examining further. Looking in the wrong places can cause you to miss valuable information.&#xA;One construct that can trip people up is struct representation in assembly. It can be unclear when a struct is being manipulated or accessed. After all, the struct is organised as a contiguous block of bytes, with each member residing sequentially in memory.</description>
    </item>
  </channel>
</rss>
